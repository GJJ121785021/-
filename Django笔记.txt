
from django.db.models.functions import Lower
from django.db.models import Count
from django.views.decorators.http import require_http_methods


合并queryset   q1|q2   chian（1，2）   q1.union（q2）

debian centos

正确的格式化时间的方式
datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')


交互会话中的唯一身份标识符
删除session里的一条数据  del session[key]
彻底删除session：  request.session.flush()

    request.session[goods_id] = request.session.get(str(goods_id), 0) + 1
[goods_id] 是int类型记录到session中的时候key也会变成str

 Goods.objects.filter(pk=goods.pk).update(inventory=F('inventory')-goods_dict[goods])
F表达式实例


1.分包： py文件改成包，然后把各种子模块拆分开，最后在__init__导入即可，外部的包的书写方法都不需要变化
2.下载httpie包    cmd用http get 。。。方法可以请求
3.ClassView.as_view() 括号内可以重置类属性
4. yum -y install httpd-tools 安装 ab测压

django 项目提供了一个导出的方法 python manage.py dumpdata, 不指定 appname 时默认为导出所有的app
python3 manage.py dumpdata [appname] > appname_data.json
数据导入,不需要指定 appname
python3 manage.py loaddata blog_dump.json



    try:
        with transaction.atomic():
事务

快捷键  .if   .re
打开红灯泡 -> alt+enter
下方新建不动光标-> ctrl+enter
重命名本地变量 -> shift+F6
显示方法参数 -> ctrl +p
选择覆盖方法 -> ctrl + o


静态文件管理，debug=True时，这样设置就行了
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'),]
debug改为False时（部署时），需要在设置中 STATIC_ROOT = 'static' 并且把上面的（STATICFILES_DIRS ）注释掉
然后在项目的urls中添加
from django.conf import settings
if settings.DEBUG is False:
    from django.views import static
    from django.conf.urls import url
    urlpatterns += [url(r'^static/(?P<path>.*)$', static.serve, {'document_root': settings.STATIC_ROOT}, name='static')]
第二种方法：
在设置中 STATIC_ROOT = os.path.join(BASE_DIR, "/static/")
然后主urls.py    urlpatterns = [
    ...
    re_path(r'^static/(?P<path>.*)$', serve, {'document_root': settings.STATIC_ROOT}, name='static'),
    re_path(r'^media/(?P<path>.*)$', serve, {'document_root': settings.MEDIA_ROOT}, name='media')]
然后命令行执行一下： python manage.py collectstatic
就可以了，第一种方法可能比较方便，但是第二种方法比较正规，第二种方法类似于部署，他在我本地的一个位置重新复制了静态文件然后来加载


图片文件上传：
默认会保存在 MEDIA_ROOT = os.path.join(BASE_DIR, 'static')这个文件下
其中Model中应该配置     image_path = models.ImageField(upload_to='images/%Y/%m/%d')
HTML时      url = os.path.join(settings.MEDIA, instance.image_path.url)

queryset有一个.model() 方法  ==   StudentModel()
在Manager()中重写（新建方法时） 要调用这个 直接self.models  --->>   要得到StudentModel()  直接 self.model()  


返回当前页面
两种方法，request.META.get('HTTP_REFERER')
request.headers.get('Referer')

怎么设置cookie    set_cookie()
怎么获取cookie    request.COOKIE.get()

content-type   MIME  MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型
作用：指定传输数据使用哪种形式打开
格式： 大类型/小类型   example:  image/jpg   image/png  text/css    text/html


models可以生成数据库，Django也提供了数据库表生成models；
使用 python manage.py inspectdb可以得到Model    
通过 python manage.py inspectdb > Appname/models.py  可以重定向输出，之间创建这个文件并将model写在里面，前提是这个models.py文件不存在，你先把它删了就行
生成的Model会在class Meta 中有一个managed=False意思是你这个模型是自己生成的不受迁移文件的管理，如果想要自己写的model也不受迁移管理也可以自己声明

默认null=False   此时数据库中不能等于null ， python中不能等于None，可以为空字符串
设置为null=True   此时空字符串和null都可以存在于数据库中
blank默认为False， 不能为None， 可以为空字符串
null与数据库完全相关，而blank与验证相关

用User的ModelForm自动建立表单的时候，在主界面会出现Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
这些东西，猜测这是username不符条件造成的，只需要在ModelForm里重写一下username字段就可以了，
有两种方法，一个是在class Meta: 下加  help_texts = {  'username': None, }  或者直接在class下写username = forms.CharField(  （help_text=False或不加） ) 就OK了


在刚创建的项目中可能没有模板目录，需要的操作是，在主目录下创建templates的文件夹，然后在settings中的TEMPLATES= [{DIRS=os.path.join(BASE_DIR, 'templates')}]

模板语法：
乘除： {% widthratio 数 分母 分子 %}
整除:   {% if num | divisibleby:2 %}

select_related() 和 prefetch_related()都是用来进行缓存减少查询次数的，
区别是一个主要用在一对多，一个用在多对多

从数据库中更新一下 obj.refresh_from_db()

people = models.Manager() 自定义管理器名称设置放在Model中，而不是放在class Meta 中

JsonResponse(data, json_dumps_params={'ensure_ascii':False})

on_delete=models.PROTECT 这个是什么意思，， 受保护的字段，要把与他关联的从表里的数据删了才能删主表
换句话说：主表存在级联数据，删除动作受保护，不能成功，。当主表不存在级联数据，可以成功删除

cursor.description 可获取字段名

将models批量插入数据库：
TestModel.objects.bulk_create(obj_list)

批量删除（在不考虑安全性的前提下）：
TestModel.objects.extra(where=['id IN (' + id_str + ')']).delete()

pycharm  连mysql 失败 加 ?serverTimezone=GMT


mysqlclient安装失败，修改代码（不修改源码）
Django3.0.2解决方法可以参考 import pymysql pymysql.version_info = (1, 3, 13, "final", 0) pymysql.install_as_MySQLdb()


（头像） icon = models.ImageField(upload_to='icon/%Y/%m/%d/')  